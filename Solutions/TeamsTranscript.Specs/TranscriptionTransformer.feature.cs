// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TeamsTranscript.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TranscriptionTransformer")]
    public partial class TranscriptionTransformerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "TranscriptionTransformer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "TranscriptionTransformer", "I want to be able to process a list of transcription data structures\r\nAnd replace" +
                    " speaker names with their titles so that Doe, John becomes John Doe", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Process a list of transcription entries with speaker names which need transformin" +
            "g")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        public void ProcessAListOfTranscriptionEntriesWithSpeakerNamesWhichNeedTransforming()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Process a list of transcription entries with speaker names which need transformin" +
                    "g", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "start",
                            "end",
                            "speaker",
                            "script"});
                table14.AddRow(new string[] {
                            "0:0:0.0",
                            "0:0:1.250",
                            "Doe, Jane",
                            "Hi I\'m Jane Doe, CEO."});
                table14.AddRow(new string[] {
                            "0:0:2.90",
                            "0:0:4.480",
                            "Doe, John",
                            "Hi, I\'m John Doe, no relation, Ha! COO."});
                table14.AddRow(new string[] {
                            "0:0:3.520",
                            "0:0:5.460",
                            "Doe, Jane",
                            "Today I want to discuss the plans for the next financial year."});
                table14.AddRow(new string[] {
                            "0:0:5.300",
                            "0:0:5.910",
                            "Doe, Jane",
                            "This year has been turbulent, next year is predicted to be too."});
                table14.AddRow(new string[] {
                            "0:0:7.80",
                            "0:0:8.180",
                            "Doe, John",
                            "And the turbulence hasn\'t been restricted to a single region."});
                table14.AddRow(new string[] {
                            "0:0:8.810",
                            "0:0:9.500",
                            "Doe, John",
                            "It\'s been a global trend"});
                table14.AddRow(new string[] {
                            "0:0:10.690",
                            "0:0:11.510",
                            "Doe, Jane",
                            "And that\'s what\'s worrisome, and why we need a plan."});
#line 8
 testRunner.Given("I have the following transcription entries:", ((string)(null)), table14, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "old",
                            "new"});
                table15.AddRow(new string[] {
                            "Doe, Jane",
                            "Jane Doe"});
                table15.AddRow(new string[] {
                            "Doe, John",
                            "John Doe"});
#line 17
 testRunner.And("I have the following list of transformations:", ((string)(null)), table15, "And ");
#line hidden
#line 21
 testRunner.When("I transform the Transcription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "start",
                            "end",
                            "speaker",
                            "script"});
                table16.AddRow(new string[] {
                            "0:0:0.0",
                            "0:0:1.250",
                            "Jane Doe",
                            "Hi I\'m Jane Doe, CEO."});
                table16.AddRow(new string[] {
                            "0:0:2.90",
                            "0:0:4.480",
                            "John Doe",
                            "Hi, I\'m John Doe, no relation, Ha! COO."});
                table16.AddRow(new string[] {
                            "0:0:3.520",
                            "0:0:5.460",
                            "Jane Doe",
                            "Today I want to discuss the plans for the next financial year."});
                table16.AddRow(new string[] {
                            "0:0:5.300",
                            "0:0:5.910",
                            "Jane Doe",
                            "This year has been turbulent, next year is predicted to be too."});
                table16.AddRow(new string[] {
                            "0:0:7.80",
                            "0:0:8.180",
                            "John Doe",
                            "And the turbulence hasn\'t been restricted to a single region."});
                table16.AddRow(new string[] {
                            "0:0:8.810",
                            "0:0:9.500",
                            "John Doe",
                            "It\'s been a global trend"});
                table16.AddRow(new string[] {
                            "0:0:10.690",
                            "0:0:11.510",
                            "Jane Doe",
                            "And that\'s what\'s worrisome, and why we need a plan."});
#line 22
 testRunner.Then("I should get a list of aggregated Transcription data structures with the followin" +
                        "g content:", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
